<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on McDul的博客</title>
    <link>http://mcdul1996.github.io/posts/</link>
    <description>Recent content in Posts on McDul的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Tue, 02 Jun 2020 17:24:19 +0800</lastBuildDate>
    
	<atom:link href="http://mcdul1996.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>游戏题材</title>
      <link>http://mcdul1996.github.io/posts/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%A5%E5%90%8E%E6%83%B3%E8%A6%81%E5%81%9A%E7%9A%84%E4%B8%80%E4%B8%AA%E9%A2%98%E6%9D%90.md/%E6%B8%B8%E6%88%8F%E9%A2%98%E6%9D%90/</link>
      <pubDate>Tue, 02 Jun 2020 17:24:19 +0800</pubDate>
      
      <guid>http://mcdul1996.github.io/posts/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%A5%E5%90%8E%E6%83%B3%E8%A6%81%E5%81%9A%E7%9A%84%E4%B8%80%E4%B8%AA%E9%A2%98%E6%9D%90.md/%E6%B8%B8%E6%88%8F%E9%A2%98%E6%9D%90/</guid>
      <description>人生有好多细节,决定了你的成长速度</description>
    </item>
    
    <item>
      <title>关于我对maven和java包管理的理解</title>
      <link>http://mcdul1996.github.io/posts/%E5%85%B3%E4%BA%8E%E6%88%91%E5%AF%B9maven%E5%92%8Cjava%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sat, 30 May 2020 11:45:07 +0800</pubDate>
      
      <guid>http://mcdul1996.github.io/posts/%E5%85%B3%E4%BA%8E%E6%88%91%E5%AF%B9maven%E5%92%8Cjava%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>java的包管理 1. 什么是包  就是一个包含许多类的一个压缩包 这个包的作用是： 当JVM要找一个类的时候，它就会从classpath(类路径)里挨个一个个包里寻找这个类  2. 什么是包管理  包管理的本质就是告诉JVM如何找到所需要的第三方类库 并且可以解决其中的冲突问题(classpath里的某些包都含有同名不同版本的类，由于基本规则选择的那个优先的类里面的代码并不是你想要的，可能还存在BUG)  3. Maven是什么  Maven是划时代的包管理工具(必须强调Maven远远不止是包管理工具) Convention over configuration(约定优于配置) Maven有两个仓库 Maven的中央仓库：在远端的服务器上 包含了世界上所有的包(按照一定的约定存储包) Maven的本地仓库：默认位于~/.m2 你不可能每次编译的时候都把世界上所有的包下载下来，你可能想要在断网的时候进行编译 当你需要用包的时候，maven会帮你自动的从中央仓库下载，下载的第三方包放在这里进行缓存  4. Maven的包  按照约定为所有的包编号，⽅便检索 groupId/artifactId/version 扩展：语义化版本 SNAPSHOT快照版本： 因为maven有一个约定：当你这个包发布的时候，不允许你再去修改它，但是你在开发过程中需要频繁的修改它 传递性依赖：虽然你只下载了一个包，但maven会根据pom将这个包的完整的依赖树都下载下来 传递性依赖的⾃动管理 原则：绝对不允许最终的classpath出现同名不同版本的jar包 依赖冲突的解决原则：最近的胜出(但是很可能这个胜出的包里面的类的代码并不是你想要的，这个时候我们就需要根据自己的需要利用Maven使自己想要的包胜出) 方法1：既然是谁离得近谁赢，那就直接在我的项目里直接依赖我想要的版本的jar包 方法2：直接使用 排除那个胜出的版本的包  </description>
    </item>
    
    <item>
      <title>如何使用 Hugo 搭建个人博客</title>
      <link>http://mcdul1996.github.io/posts/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 28 May 2020 16:03:50 +0800</pubDate>
      
      <guid>http://mcdul1996.github.io/posts/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>1.下载 Hugo
进入Hugo下载 在 Assets 中下载合适的版本， 例如：hugo_0.58.3_Windows-64bit.zip （找各自系统对应的版本下载） 解压到自定义文件夹（我的是解压到 D:\Software\hugo） 2.配置环境变量
我的电脑—-&amp;gt;属性—-&amp;gt;高级系统设置—-&amp;gt;环境变量—-&amp;gt;系统变量—-&amp;gt; Path—-&amp;gt;新增 D:\Hugo 路径（根据 hugo.exe 的位置自行更换路径） 重启终端，运行hugo version 查看版本 3.利用 hugo 生成自己的博客 site
推荐找个安全的目录打开命令行,我的目录是 D:\Software\McDul 复制执行下条命令: hugo new site [username].github.io-creator 会生成一个文件夹[username].github.io-creator 接着进入这个文件目录： cd [username].github.io-creator 创建 git 本地仓库： git init 下载 Ananke 博客主题： git submodule add https://github.com/budparr/gohugo-theme-ananke.gitthemes/ananke  在 config.toml 文件中将主题改成 Ananke： echo &amp;#39;theme=Ananke&amp;#39; &amp;gt;&amp;gt; config.toml 用 hugo 搭建了自己的博客已完成 4.开始建立第一篇博客
新建文章： hugo new posts/第二篇博客.md 运行 code posts/第二篇博客.md 对文件进行编辑， 注意不要把文件原本的内容给删了，直接在后面另起一行写新内容， 修改好之后将 draft 后的 true 改成 false 表示已经不是草稿模式， 保存。 5.</description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://mcdul1996.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Tue, 26 May 2020 16:38:47 +0800</pubDate>
      
      <guid>http://mcdul1996.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 我的博客开通了，希望我能写出好文章给大家看。</description>
    </item>
    
  </channel>
</rss>